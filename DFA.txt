I0= [¡¾P -> . N declare_list ¡¿¡¾N -> . ¡¿]

I1= [¡¾P -> N . declare_list ¡¿¡¾declare_list -> . declare declare_list ¡¿¡¾declare_list -> . declare ¡¿¡¾declare -> . int ID M A function_declare ¡¿¡¾declare -> . int ID var_declare ¡¿¡¾declare -> . float ID var_declare ¡¿¡¾declare -> . float ID M A function_declare ¡¿¡¾declare -> . char ID var_declare ¡¿¡¾declare -> . char ID M A function_declare ¡¿¡¾declare -> . void ID M A function_declare ¡¿]

I2= [¡¾P -> N declare_list . ¡¿]

I3= [¡¾declare_list -> . declare declare_list ¡¿¡¾declare_list -> declare . declare_list ¡¿¡¾declare_list -> . declare ¡¿¡¾declare_list -> declare . ¡¿¡¾declare -> . int ID M A function_declare ¡¿¡¾declare -> . int ID var_declare ¡¿¡¾declare -> . float ID var_declare ¡¿¡¾declare -> . float ID M A function_declare ¡¿¡¾declare -> . char ID var_declare ¡¿¡¾declare -> . char ID M A function_declare ¡¿¡¾declare -> . void ID M A function_declare ¡¿]

I4= [¡¾declare -> int . ID M A function_declare ¡¿¡¾declare -> int . ID var_declare ¡¿]

I5= [¡¾declare -> float . ID var_declare ¡¿¡¾declare -> float . ID M A function_declare ¡¿]

I6= [¡¾declare -> char . ID var_declare ¡¿¡¾declare -> char . ID M A function_declare ¡¿]

I7= [¡¾declare -> void . ID M A function_declare ¡¿]

I8= [¡¾declare_list -> declare declare_list . ¡¿]

I9= [¡¾declare -> int ID . M A function_declare ¡¿¡¾declare -> int ID . var_declare ¡¿¡¾var_declare -> . ; ¡¿¡¾M -> . ¡¿]

I10= [¡¾declare -> float ID . var_declare ¡¿¡¾declare -> float ID . M A function_declare ¡¿¡¾var_declare -> . ; ¡¿¡¾M -> . ¡¿]

I11= [¡¾declare -> char ID . var_declare ¡¿¡¾declare -> char ID . M A function_declare ¡¿¡¾var_declare -> . ; ¡¿¡¾M -> . ¡¿]

I12= [¡¾declare -> void ID . M A function_declare ¡¿¡¾M -> . ¡¿]

I13= [¡¾declare -> int ID M . A function_declare ¡¿¡¾A -> . ¡¿]

I14= [¡¾declare -> int ID var_declare . ¡¿]

I15= [¡¾var_declare -> ; . ¡¿]

I16= [¡¾declare -> float ID var_declare . ¡¿]

I17= [¡¾declare -> float ID M . A function_declare ¡¿¡¾A -> . ¡¿]

I18= [¡¾declare -> char ID var_declare . ¡¿]

I19= [¡¾declare -> char ID M . A function_declare ¡¿¡¾A -> . ¡¿]

I20= [¡¾declare -> void ID M . A function_declare ¡¿¡¾A -> . ¡¿]

I21= [¡¾declare -> int ID M A . function_declare ¡¿¡¾function_declare -> . ( parameter ) sentence_block ¡¿]

I22= [¡¾declare -> float ID M A . function_declare ¡¿¡¾function_declare -> . ( parameter ) sentence_block ¡¿]

I23= [¡¾declare -> char ID M A . function_declare ¡¿¡¾function_declare -> . ( parameter ) sentence_block ¡¿]

I24= [¡¾declare -> void ID M A . function_declare ¡¿¡¾function_declare -> . ( parameter ) sentence_block ¡¿]

I25= [¡¾declare -> int ID M A function_declare . ¡¿]

I26= [¡¾function_declare -> ( . parameter ) sentence_block ¡¿¡¾parameter -> . parameter_list ¡¿¡¾parameter -> . void ¡¿¡¾parameter_list -> . param ¡¿¡¾parameter_list -> . param , parameter_list ¡¿¡¾param -> . int ID ¡¿¡¾param -> . char ID ¡¿¡¾param -> . float ID ¡¿]

I27= [¡¾declare -> float ID M A function_declare . ¡¿]

I28= [¡¾declare -> char ID M A function_declare . ¡¿]

I29= [¡¾declare -> void ID M A function_declare . ¡¿]

I30= [¡¾function_declare -> ( parameter . ) sentence_block ¡¿]

I31= [¡¾parameter -> parameter_list . ¡¿]

I32= [¡¾parameter -> void . ¡¿]

I33= [¡¾parameter_list -> param . ¡¿¡¾parameter_list -> param . , parameter_list ¡¿]

I34= [¡¾param -> int . ID ¡¿]

I35= [¡¾param -> char . ID ¡¿]

I36= [¡¾param -> float . ID ¡¿]

I37= [¡¾function_declare -> ( parameter ) . sentence_block ¡¿¡¾sentence_block -> . { inner_declare sentence_list } ¡¿]

I38= [¡¾parameter_list -> . param ¡¿¡¾parameter_list -> . param , parameter_list ¡¿¡¾parameter_list -> param , . parameter_list ¡¿¡¾param -> . int ID ¡¿¡¾param -> . char ID ¡¿¡¾param -> . float ID ¡¿]

I39= [¡¾param -> int ID . ¡¿]

I40= [¡¾param -> char ID . ¡¿]

I41= [¡¾param -> float ID . ¡¿]

I42= [¡¾function_declare -> ( parameter ) sentence_block . ¡¿]

I43= [¡¾sentence_block -> { . inner_declare sentence_list } ¡¿¡¾inner_declare -> . ¡¿¡¾inner_declare -> . inner_var_declare ; inner_declare ¡¿¡¾inner_var_declare -> . int ID ¡¿¡¾inner_var_declare -> . float ID ¡¿¡¾inner_var_declare -> . char ID ¡¿]

I44= [¡¾parameter_list -> param , parameter_list . ¡¿]

I45= [¡¾sentence_block -> { inner_declare . sentence_list } ¡¿¡¾sentence_list -> . sentence M sentence_list ¡¿¡¾sentence_list -> . sentence ¡¿¡¾sentence -> . if_sentence ¡¿¡¾sentence -> . while_sentence ¡¿¡¾sentence -> . return_sentence ¡¿¡¾sentence -> . assign_sentence ¡¿¡¾assign_sentence -> . ID = expression ; ¡¿¡¾return_sentence -> . return ; ¡¿¡¾return_sentence -> . return expression ; ¡¿¡¾while_sentence -> . while M ( expression ) A sentence_block ¡¿¡¾if_sentence -> . if ( expression ) A sentence_block ¡¿¡¾if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block ¡¿]

I46= [¡¾inner_declare -> inner_var_declare . ; inner_declare ¡¿]

I47= [¡¾inner_var_declare -> int . ID ¡¿]

I48= [¡¾inner_var_declare -> float . ID ¡¿]

I49= [¡¾inner_var_declare -> char . ID ¡¿]

I50= [¡¾sentence_block -> { inner_declare sentence_list . } ¡¿]

I51= [¡¾sentence_list -> sentence . M sentence_list ¡¿¡¾sentence_list -> sentence . ¡¿¡¾M -> . ¡¿]

I52= [¡¾sentence -> if_sentence . ¡¿]

I53= [¡¾sentence -> while_sentence . ¡¿]

I54= [¡¾sentence -> return_sentence . ¡¿]

I55= [¡¾sentence -> assign_sentence . ¡¿]

I56= [¡¾assign_sentence -> ID . = expression ; ¡¿]

I57= [¡¾return_sentence -> return . ; ¡¿¡¾return_sentence -> return . expression ; ¡¿¡¾expression -> . add_expression ¡¿¡¾expression -> . add_expression > add_expression ¡¿¡¾expression -> . add_expression < add_expression ¡¿¡¾expression -> . add_expression == add_expression ¡¿¡¾expression -> . add_expression >= add_expression ¡¿¡¾expression -> . add_expression <= add_expression ¡¿¡¾expression -> . add_expression != add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I58= [¡¾while_sentence -> while . M ( expression ) A sentence_block ¡¿¡¾M -> . ¡¿]

I59= [¡¾if_sentence -> if . ( expression ) A sentence_block ¡¿¡¾if_sentence -> if . ( expression ) A sentence_block N else M A sentence_block ¡¿]

I60= [¡¾inner_declare -> . ¡¿¡¾inner_declare -> . inner_var_declare ; inner_declare ¡¿¡¾inner_declare -> inner_var_declare ; . inner_declare ¡¿¡¾inner_var_declare -> . int ID ¡¿¡¾inner_var_declare -> . float ID ¡¿¡¾inner_var_declare -> . char ID ¡¿]

I61= [¡¾inner_var_declare -> int ID . ¡¿]

I62= [¡¾inner_var_declare -> float ID . ¡¿]

I63= [¡¾inner_var_declare -> char ID . ¡¿]

I64= [¡¾sentence_block -> { inner_declare sentence_list } . ¡¿]

I65= [¡¾sentence_list -> . sentence M sentence_list ¡¿¡¾sentence_list -> sentence M . sentence_list ¡¿¡¾sentence_list -> . sentence ¡¿¡¾sentence -> . if_sentence ¡¿¡¾sentence -> . while_sentence ¡¿¡¾sentence -> . return_sentence ¡¿¡¾sentence -> . assign_sentence ¡¿¡¾assign_sentence -> . ID = expression ; ¡¿¡¾return_sentence -> . return ; ¡¿¡¾return_sentence -> . return expression ; ¡¿¡¾while_sentence -> . while M ( expression ) A sentence_block ¡¿¡¾if_sentence -> . if ( expression ) A sentence_block ¡¿¡¾if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block ¡¿]

I66= [¡¾assign_sentence -> ID = . expression ; ¡¿¡¾expression -> . add_expression ¡¿¡¾expression -> . add_expression > add_expression ¡¿¡¾expression -> . add_expression < add_expression ¡¿¡¾expression -> . add_expression == add_expression ¡¿¡¾expression -> . add_expression >= add_expression ¡¿¡¾expression -> . add_expression <= add_expression ¡¿¡¾expression -> . add_expression != add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I67= [¡¾return_sentence -> return ; . ¡¿]

I68= [¡¾return_sentence -> return expression . ; ¡¿]

I69= [¡¾expression -> add_expression . ¡¿¡¾expression -> add_expression . > add_expression ¡¿¡¾expression -> add_expression . < add_expression ¡¿¡¾expression -> add_expression . == add_expression ¡¿¡¾expression -> add_expression . >= add_expression ¡¿¡¾expression -> add_expression . <= add_expression ¡¿¡¾expression -> add_expression . != add_expression ¡¿]

I70= [¡¾add_expression -> item . ¡¿¡¾add_expression -> item . + add_expression ¡¿¡¾add_expression -> item . - add_expression ¡¿]

I71= [¡¾item -> factor . ¡¿¡¾item -> factor . * item ¡¿¡¾item -> factor . / item ¡¿]

I72= [¡¾factor -> NUM_INT . ¡¿]

I73= [¡¾factor -> NUM_FLOAT . ¡¿]

I74= [¡¾factor -> CHAR . ¡¿]

I75= [¡¾expression -> . add_expression ¡¿¡¾expression -> . add_expression > add_expression ¡¿¡¾expression -> . add_expression < add_expression ¡¿¡¾expression -> . add_expression == add_expression ¡¿¡¾expression -> . add_expression >= add_expression ¡¿¡¾expression -> . add_expression <= add_expression ¡¿¡¾expression -> . add_expression != add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> ( . expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I76= [¡¾factor -> ID . ( argument_list ) ¡¿¡¾factor -> ID . ¡¿]

I77= [¡¾while_sentence -> while M . ( expression ) A sentence_block ¡¿]

I78= [¡¾if_sentence -> if ( . expression ) A sentence_block ¡¿¡¾if_sentence -> if ( . expression ) A sentence_block N else M A sentence_block ¡¿¡¾expression -> . add_expression ¡¿¡¾expression -> . add_expression > add_expression ¡¿¡¾expression -> . add_expression < add_expression ¡¿¡¾expression -> . add_expression == add_expression ¡¿¡¾expression -> . add_expression >= add_expression ¡¿¡¾expression -> . add_expression <= add_expression ¡¿¡¾expression -> . add_expression != add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I79= [¡¾inner_declare -> inner_var_declare ; inner_declare . ¡¿]

I80= [¡¾sentence_list -> sentence M sentence_list . ¡¿]

I81= [¡¾assign_sentence -> ID = expression . ; ¡¿]

I82= [¡¾return_sentence -> return expression ; . ¡¿]

I83= [¡¾expression -> add_expression > . add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I84= [¡¾expression -> add_expression < . add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I85= [¡¾expression -> add_expression == . add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I86= [¡¾expression -> add_expression >= . add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I87= [¡¾expression -> add_expression <= . add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I88= [¡¾expression -> add_expression != . add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I89= [¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> item + . add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I90= [¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾add_expression -> item - . add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I91= [¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> factor * . item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I92= [¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾item -> factor / . item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I93= [¡¾factor -> ( expression . ) ¡¿]

I94= [¡¾expression -> . add_expression ¡¿¡¾expression -> . add_expression > add_expression ¡¿¡¾expression -> . add_expression < add_expression ¡¿¡¾expression -> . add_expression == add_expression ¡¿¡¾expression -> . add_expression >= add_expression ¡¿¡¾expression -> . add_expression <= add_expression ¡¿¡¾expression -> . add_expression != add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> ID ( . argument_list ) ¡¿¡¾factor -> . ID ¡¿¡¾argument_list -> . ¡¿¡¾argument_list -> . expression ¡¿¡¾argument_list -> . expression , argument_list ¡¿]

I95= [¡¾while_sentence -> while M ( . expression ) A sentence_block ¡¿¡¾expression -> . add_expression ¡¿¡¾expression -> . add_expression > add_expression ¡¿¡¾expression -> . add_expression < add_expression ¡¿¡¾expression -> . add_expression == add_expression ¡¿¡¾expression -> . add_expression >= add_expression ¡¿¡¾expression -> . add_expression <= add_expression ¡¿¡¾expression -> . add_expression != add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿]

I96= [¡¾if_sentence -> if ( expression . ) A sentence_block ¡¿¡¾if_sentence -> if ( expression . ) A sentence_block N else M A sentence_block ¡¿]

I97= [¡¾assign_sentence -> ID = expression ; . ¡¿]

I98= [¡¾expression -> add_expression > add_expression . ¡¿]

I99= [¡¾expression -> add_expression < add_expression . ¡¿]

I100= [¡¾expression -> add_expression == add_expression . ¡¿]

I101= [¡¾expression -> add_expression >= add_expression . ¡¿]

I102= [¡¾expression -> add_expression <= add_expression . ¡¿]

I103= [¡¾expression -> add_expression != add_expression . ¡¿]

I104= [¡¾add_expression -> item + add_expression . ¡¿]

I105= [¡¾add_expression -> item - add_expression . ¡¿]

I106= [¡¾item -> factor * item . ¡¿]

I107= [¡¾item -> factor / item . ¡¿]

I108= [¡¾factor -> ( expression ) . ¡¿]

I109= [¡¾factor -> ID ( argument_list . ) ¡¿]

I110= [¡¾argument_list -> expression . ¡¿¡¾argument_list -> expression . , argument_list ¡¿]

I111= [¡¾while_sentence -> while M ( expression . ) A sentence_block ¡¿]

I112= [¡¾A -> . ¡¿¡¾if_sentence -> if ( expression ) . A sentence_block ¡¿¡¾if_sentence -> if ( expression ) . A sentence_block N else M A sentence_block ¡¿]

I113= [¡¾factor -> ID ( argument_list ) . ¡¿]

I114= [¡¾expression -> . add_expression ¡¿¡¾expression -> . add_expression > add_expression ¡¿¡¾expression -> . add_expression < add_expression ¡¿¡¾expression -> . add_expression == add_expression ¡¿¡¾expression -> . add_expression >= add_expression ¡¿¡¾expression -> . add_expression <= add_expression ¡¿¡¾expression -> . add_expression != add_expression ¡¿¡¾add_expression -> . item ¡¿¡¾add_expression -> . item + add_expression ¡¿¡¾add_expression -> . item - add_expression ¡¿¡¾item -> . factor ¡¿¡¾item -> . factor * item ¡¿¡¾item -> . factor / item ¡¿¡¾factor -> . NUM_INT ¡¿¡¾factor -> . NUM_FLOAT ¡¿¡¾factor -> . CHAR ¡¿¡¾factor -> . ( expression ) ¡¿¡¾factor -> . ID ( argument_list ) ¡¿¡¾factor -> . ID ¡¿¡¾argument_list -> . ¡¿¡¾argument_list -> . expression ¡¿¡¾argument_list -> . expression , argument_list ¡¿¡¾argument_list -> expression , . argument_list ¡¿]

I115= [¡¾A -> . ¡¿¡¾while_sentence -> while M ( expression ) . A sentence_block ¡¿]

I116= [¡¾sentence_block -> . { inner_declare sentence_list } ¡¿¡¾if_sentence -> if ( expression ) A . sentence_block ¡¿¡¾if_sentence -> if ( expression ) A . sentence_block N else M A sentence_block ¡¿]

I117= [¡¾argument_list -> expression , argument_list . ¡¿]

I118= [¡¾sentence_block -> . { inner_declare sentence_list } ¡¿¡¾while_sentence -> while M ( expression ) A . sentence_block ¡¿]

I119= [¡¾if_sentence -> if ( expression ) A sentence_block . ¡¿¡¾if_sentence -> if ( expression ) A sentence_block . N else M A sentence_block ¡¿¡¾N -> . ¡¿]

I120= [¡¾while_sentence -> while M ( expression ) A sentence_block . ¡¿]

I121= [¡¾if_sentence -> if ( expression ) A sentence_block N . else M A sentence_block ¡¿]

I122= [¡¾if_sentence -> if ( expression ) A sentence_block N else . M A sentence_block ¡¿¡¾M -> . ¡¿]

I123= [¡¾A -> . ¡¿¡¾if_sentence -> if ( expression ) A sentence_block N else M . A sentence_block ¡¿]

I124= [¡¾sentence_block -> . { inner_declare sentence_list } ¡¿¡¾if_sentence -> if ( expression ) A sentence_block N else M A . sentence_block ¡¿]

I125= [¡¾if_sentence -> if ( expression ) A sentence_block N else M A sentence_block . ¡¿]

